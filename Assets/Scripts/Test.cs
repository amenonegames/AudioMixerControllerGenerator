

using UnityEngine;
using UnityEngine.Audio;

using Sound.Interface;
namespace Sound
{

        /// <summary>
        /// This class is generated by script : AudioMixerControllerGenerator
        /// </summary>
        public class AudioMixerController:MonoBehaviour , IAudioMixerControllable
        {
            [SerializeField]private AudioMixer _audioMixer;

            private float _originalMasterVol;

            private float _originalMasterPitch;

            

            private void Awake()
            {

                _audioMixer.GetFloat("MasterVol", out _originalMasterVol);

                _audioMixer.GetFloat("MasterPitch", out _originalMasterPitch);


            }
            public void ExposedPropertyChange(float value ,ExposedProperty prop)
            {
                switch(prop)
                {
                    case ExposedProperty.MasterVol:
                        MasterVolChange(value);;
                        break;
                    case ExposedProperty.MasterPitch:
                        MasterPitchChange(value);;
                        break;
                }
            }
            public void ExposedPropertyReset(float value ,ExposedProperty prop)
            {
                switch(prop)
                {
                    case ExposedProperty.MasterVol:
                        MasterVolReset(value);;
                        break;
                    case ExposedProperty.MasterPitch:
                        MasterPitchReset(value);;
                        break;
                }
            }
            public bool GetExposedProperty(out float value ,ExposedProperty prop)
            {
                switch(prop)
                {
                    case ExposedProperty.MasterVol:
                        return GetMasterVol(out value);;
                        break;
                    case ExposedProperty.MasterPitch:
                        return GetMasterPitch(out value);;
                        break;
                }
            }
            public void MasterVolChange(float value)
            {
                _audioMixer.SetFloat("MasterVol", value);
            }

            public void MasterVolReset(float value)
            {
                _audioMixer.SetFloat("MasterVol", _originalMasterVol);
            }

            public bool GetMasterVol(out float value)
            {
                return _audioMixer.GetFloat("MasterVol", out value);
            }

            public void MasterPitchChange(float value)
            {
                _audioMixer.SetFloat("MasterPitch", value);
            }

            public void MasterPitchReset(float value)
            {
                _audioMixer.SetFloat("MasterPitch", _originalMasterPitch);
            }

            public bool GetMasterPitch(out float value)
            {
                return _audioMixer.GetFloat("MasterPitch", out value);
            }

        }
}




namespace Sound.Interface
{

    /// <summary>
    /// This class is generated by script : AudioMixerControllerGenerator
    /// </summary>
    public interface IAudioMixerControllable
    {

        void ExposedPropertyChange(float value ,ExposedProperty prop);
        void ExposedPropertyReset(float value ,ExposedProperty prop);
        bool GetExposedProperty(out float value ,ExposedProperty prop);
                
        void MasterVolChange(float value);
        void MasterVolReset(float value);
        bool GetMasterVol(out float value);

        void MasterPitchChange(float value);
        void MasterPitchReset(float value);
        bool GetMasterPitch(out float value);

    }
    public enum ExposedProperty
    {

        MasterVol,
        MasterPitch,
    }
}